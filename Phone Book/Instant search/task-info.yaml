type: edu
custom_name: stage4
files:
- name: src/phonebook/Main.java
  visible: true
  text: |
    package phonebook;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/PhoneBookTest.java
  visible: false
  text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\n\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;\nimport java.util.regex.Matcher;\n\
    import java.util.regex.Pattern;\n\npublic class PhoneBookTest extends StageTest\
    \ {\n\n    private long timeOnTestStart;\n    \n    @Override\n    public List<TestCase>\
    \ generate() {\n        timeOnTestStart = System.currentTimeMillis();\n      \
    \  return Arrays.asList(\n            new TestCase().setTimeLimit(30 * 60 * 1000)\n\
    \        );\n    }\n    \n    \n    private CheckResult checkPhrases(String reply,\
    \ String... phrases) {\n        reply = reply.toLowerCase();\n        for (String\
    \ phrase : phrases) {\n            if (!reply.contains(phrase.toLowerCase()))\
    \ {\n                return CheckResult.wrong(\"Not found the part `\" + phrase\
    \ + \"` in your output.\");\n            }\n        }\n        return CheckResult.correct();\n\
    \    }\n    \n    private List<String> findAll(String reply, String regex) {\n\
    \        Matcher matcher = Pattern.compile(regex).matcher(reply);\n        List<String>\
    \ groups = new ArrayList<>();\n        while (matcher.find()) {\n            groups.add(matcher.group());\n\
    \        }\n        return groups;\n    }\n    \n    private String timeRegex\
    \ = \"(\\\\d+)\\\\s*min.*?(\\\\d+)\\\\s*sec.*?(\\\\d+)\\\\s*ms\";\n    private\
    \ Pattern timeRegexPattern = Pattern.compile(timeRegex);\n    \n    private long\
    \ parseTimestamp(String timestamp) {\n        Matcher matcher = timeRegexPattern.matcher(timestamp);\n\
    \        if (!matcher.matches() || matcher.groupCount() < 3) {\n            throw\
    \ new IllegalStateException(\"???Not matches the line \" + timestamp);\n     \
    \   }\n        int min = Integer.parseInt(matcher.group(1));\n        int sec\
    \ = Integer.parseInt(matcher.group(2));\n        int ms = Integer.parseInt(matcher.group(3));\n\
    \        return ms + sec * 1000 + min * 1000 * 60;\n    }\n    \n    \n    \n\
    \    @Override\n    public CheckResult check(String reply, Object clue) {\n  \
    \      long realTime = System.currentTimeMillis() - timeOnTestStart;\n       \
    \ reply = reply.toLowerCase();\n        CheckResult res = checkPhrases(reply,\n\
    \                \"found\",\n                \"min.\",\n                \"sec.\"\
    ,\n                \"ms.\",\n                \"sorting time\",\n             \
    \   \"searching time\",\n                \"linear search\",\n                \"\
    bubble sort\",\n                \"jump search\",\n                \"quick sort\"\
    ,\n                \"binary search\",\n                \"hash table\",\n     \
    \           \"creating time\"\n        );\n        if (!res.isCorrect()) {\n \
    \           return res;\n        }\n    \n        List<String> stat1 = findAll(reply,\
    \ \"500 / 500\");\n        List<String> stat2 = findAll(reply, \"500/500\");\n\
    \    \n        if (stat1.size() + stat2.size() < 4) {\n            return CheckResult.wrong(\"\
    Your output should contain 4 times the phrase `500 / 500`\");\n        }\n   \
    \ \n        List<String> timestamps = findAll(reply, timeRegex);\n        if (timestamps.size()\
    \ != 10) {\n            return CheckResult.wrong(\"Your output should contain\
    \ 10 timer outputs, but found \"\n                    + timestamps.size());\n\
    \        }\n        // should not fail..\n        long t1 = parseTimestamp(timestamps.get(0));\n\
    \        long t2 = parseTimestamp(timestamps.get(1));\n        long t3 = parseTimestamp(timestamps.get(2));\n\
    \        long t4 = parseTimestamp(timestamps.get(3));\n        // qsort\n    \
    \    long t5 = parseTimestamp(timestamps.get(4));\n        long t6 = parseTimestamp(timestamps.get(5));\n\
    \        long t7 = parseTimestamp(timestamps.get(6));\n        // hash table\n\
    \        long t8 = parseTimestamp(timestamps.get(7));\n        long t9 = parseTimestamp(timestamps.get(8));\n\
    \        long t10 = parseTimestamp(timestamps.get(9));\n    \n        if (Math.abs(t3\
    \ + t4 - t2) > 100) {\n            return CheckResult.wrong(\"Your third and fourth\
    \ timer outputs in total (bubble sorting and searching) \" +\n               \
    \     \"should be equal to the second (total search time).\");\n        }\n  \
    \      if (Math.abs(t6 + t7 - t5) > 100) {\n            return CheckResult.wrong(\"\
    Your 6-th and 7-th timer outputs in total (qsort and searching) \" +\n       \
    \             \"should be equal to the 5-th (total search time).\");\n       \
    \ }\n        if (Math.abs(t9 + t10 - t8) > 100) {\n            return CheckResult.wrong(\"\
    Your 9-th and 10-th timer outputs in total (creating hashtable and searching)\
    \ \" +\n                    \"should be equal to the 8-th (total search time).\"\
    );\n        }\n    \n        long estimatedTime = t1 + t2 + t5 + t8;\n       \
    \ if (realTime < 1000) {\n            return CheckResult.wrong(\"Your program\
    \ completes too fast. Faster than a second!\");\n        }\n\n        if (Math.abs(estimatedTime\
    \ - realTime) > estimatedTime * 0.3) {\n            return CheckResult.wrong(\"\
    Your estimated time is not similar to real time the program works. \" +\n    \
    \                \"Real time: \" + realTime + \"ms, estimated time: \" + estimatedTime\
    \ + \"ms\");\n        }\n        \n        if (t8 >= t5) {\n            return\
    \ CheckResult.wrong(\"Your hashtable works slower, than quick sort + binary search.\"\
    );\n        }\n        return CheckResult.correct();\n    }\n}\n"
  learner_created: false
- name: src/phonebook/sort/QuickSort.java
  visible: true
  text: |
    package phonebook.sort;

    import java.util.Collections;
    import java.util.List;
    import java.util.stream.Collectors;

    public class QuickSort {

        private long sortTime = 0;

        public long getSortTime() {
            return sortTime;
        }

        public List<String> sort(List<String> source) {
            List<String> sortedList = source.stream()
                    .map(e -> e.split(" ", 2)[1])
                    .collect(Collectors.toList());

            long start = System.currentTimeMillis();
            quickSort(sortedList, 0, source.size() - 1);
            this.sortTime = System.currentTimeMillis() - start;
            return sortedList;
        }

        private static void quickSort(List<String> source, int leftBorder, int rightBorder) {
            int leftMarker = leftBorder;
            int rightMarker = rightBorder;
            String pivot = source.get((leftMarker + rightMarker) / 2);

            do {
                while (source.get(leftMarker).compareTo(pivot) < 0) {
                    leftMarker++;
                }
                while (source.get(rightMarker).compareTo(pivot) > 0) {
                    rightMarker--;
                }
                if (leftMarker <= rightMarker) {
                    if (leftMarker < rightMarker) {
                        swap(source, rightMarker, leftMarker);
                    }
                    leftMarker++;
                    rightMarker--;
                }
            } while (leftMarker <= rightMarker);

            if (leftMarker < rightBorder) {
                quickSort(source, leftMarker, rightBorder);
            }
            if (leftBorder < rightMarker) {
                quickSort(source, leftBorder, rightMarker);
            }
        }

        private static void swap(List<String> list, int rightIndex, int leftIndex) {
            Collections.swap(list, leftIndex, rightIndex);
        }
    }
  learner_created: true
- name: src/phonebook/DataProcessing/DataProcessing.java
  visible: true
  text: "package phonebook.DataProcessing;\n\nimport phonebook.datastore.DataStore;\n\
    import phonebook.search.BinarySearch;\nimport phonebook.search.JumpSearch;\nimport\
    \ phonebook.search.LinearSearch;\nimport phonebook.sort.BubbleSort;\nimport phonebook.sort.QuickSort;\n\
    \nimport java.util.List;\n\npublic class DataProcessing {\n\n    private DataProcessing()\
    \ {\n    }\n\n    public static void run(String findTxt, String directoryTxt)\
    \ {\n        String search = \"Searching\";\n        String sort = \"Sorting\"\
    ;\n        DataStore dataStore = new DataStore();\n        LinearSearch linearSearch\
    \ = new LinearSearch();\n        BubbleSort bubbleSort = new BubbleSort();\n \
    \       JumpSearch jumpSearch = new JumpSearch();\n        BinarySearch binarySearch\
    \ = new BinarySearch();\n        QuickSort quickSort = new QuickSort();\n    \
    \    List<String> find = dataStore.getStringList(findTxt);\n        List<String>\
    \ directory = dataStore.getStringList(directoryTxt);\n\n        System.out.println(\"\
    \\nStart searching (linear search)...\");\n        linearSearch.search(find, directory);\n\
    \        long linearSearchTime = linearSearch.getLinearSearchTime();\n       \
    \ printResults(linearSearch.getCount(), find, linearSearchTime);\n\n        System.out.println(\"\
    \\nStart searching (bubble sort + jump search)...\");\n\n        List<String>\
    \ bubbleSortedList = bubbleSort.sort(directory, linearSearchTime);\n        long\
    \ bubbleSortTime = bubbleSort.getSortTime();\n\n        if (bubbleSortTime > linearSearchTime\
    \ * 10) {\n            linearSearch.setCount(0);\n            linearSearch.search(find,\
    \ bubbleSortedList);\n            long newLinearSearchTime = linearSearch.getLinearSearchTime();\n\
    \            printResults(linearSearch.getCount(), find, newLinearSearchTime +\
    \ bubbleSortTime);\n            System.out.printf(\"Sorting time: %d min. %d sec.\
    \ %d ms. - STOPPED, moved to linear search\\n\",\n                    bubbleSortTime\
    \ / 60000,\n                    (bubbleSortTime % 60000) / 1000,\n           \
    \         bubbleSortTime % 1000);\n\n            printAction(search, newLinearSearchTime);\n\
    \n        } else {\n\n            jumpSearch.search(find, bubbleSortedList);\n\
    \            long jumpSearchTime = jumpSearch.getJumpSearchTime();\n         \
    \   printResults(jumpSearch.getCount(), find, jumpSearchTime + bubbleSortTime);\n\
    \            printAction(sort, bubbleSortTime);\n            printAction(search,\
    \ jumpSearchTime);\n        }\n\n        System.out.println(\"\\nStart searching\
    \ (quick sort + binary search)...\");\n        List<String> quickSortedList =\
    \ quickSort.sort(directory);\n        long quickSortTime = quickSort.getSortTime();\n\
    \        binarySearch.search(find, quickSortedList);\n        long binarySearchTime\
    \ = binarySearch.getBinarySearchTime();\n        printResults(binarySearch.getCount(),\
    \ find, binarySearchTime + quickSortTime);\n        printAction(sort, quickSortTime);\n\
    \        printAction(search, binarySearchTime);\n    }\n\n    private static void\
    \ printAction(String action, long binarySearchTime) {\n        System.out.printf(\"\
    %s time: %d min. %d sec. %d ms.\\n\",\n                action,\n             \
    \   binarySearchTime / 60000,\n                (binarySearchTime % 60000) / 1000,\n\
    \                binarySearchTime % 1000);\n    }\n\n    private static void printResults(int\
    \ count, List<String> list, long millis) {\n        System.out.printf(\"Found\
    \ %d / %d entries. Time taken: %d min. %d sec. %d ms.\\n\",\n                count,\n\
    \                list.size(), \n                millis / 60000,\n            \
    \    (millis % 60000) / 1000,\n                millis % 1000);\n    }\n}\n"
  learner_created: true
- name: src/phonebook/search/BinarySearch.java
  visible: true
  text: |
    package phonebook.search;

    import java.util.List;

    public class BinarySearch implements Searchable {
        private long binarySearchTime = 0;
        private int count;

        public long getBinarySearchTime() {
            return binarySearchTime;
        }

        public int getCount() {
            return count;
        }

        @Override
        public void search(List<String> find, List<String> sortedList) {
            long start = System.currentTimeMillis();

            for (String s : find) {
                int left = 0;
                int right = sortedList.size() - 1;

                while (left <= right) {
                    int middle = (left + right) / 2;
                    if (sortedList.get(middle).equals(s)) {
                        count++;
                        break;
                    } else if (sortedList.get(middle).compareTo(s) > 0) {
                        right = middle - 1;
                    } else {
                        left = middle + 1;
                    }
                }
            }
            long end = System.currentTimeMillis();
            this.binarySearchTime = end - start;
        }
    }
  learner_created: true
- name: src/phonebook/search/Searchable.java
  visible: true
  text: |
    package phonebook.search;

    import java.util.List;

    public interface Searchable {
        void search(List<String> find, List<String> target);
    }
  learner_created: true
- name: src/phonebook/datastore/DataStore.java
  visible: true
  text: |
    package phonebook.datastore;

    import java.io.BufferedReader;
    import java.io.IOException;
    import java.io.InputStreamReader;
    import java.net.MalformedURLException;
    import java.net.URL;
    import java.util.ArrayList;
    import java.util.List;

    public class DataStore {

        public List<String> getStringList(String stringUrl) {
            List<String> list = new ArrayList<>();
            URL url;
            try {
                url = new URL(stringUrl);
            } catch (MalformedURLException e) {
                throw new RuntimeException(e);
            }

            try (BufferedReader bufferedReader1 = new BufferedReader(new InputStreamReader(url.openStream()))) {
                String temp;
                while ((temp = bufferedReader1.readLine()) != null) {
                    list.add(temp);
                }
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            return list;
        }
    }
  learner_created: true
- name: src/phonebook/sort/BubbleSort.java
  visible: true
  text: |
    package phonebook.sort;

    import java.util.List;
    import java.util.stream.Collectors;

    public class BubbleSort {

        private long sortTime = 0;

        public long getSortTime() {
            return sortTime;
        }

        public List<String> sort(List<String> list, long linearSearchTime) {
            List<String> sortedList = list.stream()
                    .map(e -> e.split(" ", 2)[1])
                    .collect(Collectors.toList());

            long start = System.currentTimeMillis();
            for (int i = 0; i < sortedList.size(); i++) {
                for (int j = 0; j < sortedList.size() - i - 1; j++) {
                    if (sortedList.get(j).compareTo(sortedList.get(j + 1)) > 0) {
                        sortedList.add(j, sortedList.get(j + 1));
                        sortedList.remove(j + 2);
                        long end = System.currentTimeMillis();
                        this.sortTime = end - start;
                        if (this.sortTime > linearSearchTime * 10) {
                            return list;
                        }
                    }
                }
            }
            return sortedList;
        }
    }
  learner_created: true
- name: src/phonebook/search/JumpSearch.java
  visible: true
  text: |
    package phonebook.search;

    import java.util.List;

    public class JumpSearch implements Searchable {

        private long jumpSearchTime = 0;
        private int count;

        public long getJumpSearchTime() {
            return jumpSearchTime;
        }

        public int getCount() {
            return count;
        }

        @Override
        public void search(List<String> find, List<String> sortedList) {

            long begin = System.currentTimeMillis();
            for (String s : find) {

                if (sortedList.isEmpty()) {
                    return;
                }

                int current = 0;
                int prev = 0;
                int jumpSize = (int) Math.floor(Math.sqrt(sortedList.size()));

                while (sortedList.get(current).compareTo(s) < 0) {
                    if (current == sortedList.size() - 1) {
                        return;
                    }
                    prev = current;
                    current = Math.min(current + jumpSize, sortedList.size() - 1);
                }

                while (sortedList.get(current).compareTo(s) > 0) {
                    current = current - 1;
                    if (current <= prev) {
                        return;
                    }
                }

                if (s.equals(sortedList.get(current))) {
                    this.count = this.count + 1;
                }
            }
            jumpSearchTime = System.currentTimeMillis() - begin;
        }
    }
  learner_created: true
- name: src/phonebook/search/LinearSearch.java
  visible: true
  text: |
    package phonebook.search;

    import java.util.List;
    import java.util.stream.Collectors;

    public class LinearSearch implements Searchable {

        private long linearSearchTime = 0;
        private int count = 0;

        public long getLinearSearchTime() {
            return linearSearchTime;
        }

        public int getCount() {
            return count;
        }

        public void setCount(int count) {
            this.count = count;
        }

        @Override
        public void search(List<String> find, List<String> target) {
            long start = System.currentTimeMillis();

            List<String> sortedList = target.stream()
                    .map(e -> e.split(" ", 2)[1])
                    .collect(Collectors.toList());

            for (String s : find) {
                for (int j = 0; j < target.size(); j++) {
                    if (sortedList.get(j).equals(s)) {
                        this.count++;
                        break;
                    }
                }
            }

            long end = System.currentTimeMillis();
            this.linearSearchTime = end - start;
        }
    }
  learner_created: true
- name: src/phonebook/create/HashTableFiller.java
  visible: true
  learner_created: true
- name: src/phonebook/search/HashSearch.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7721#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Wed, 15 Mar 2023 22:15:43 UTC"
record: -1
